;; Chapter 1 problems

;; 1.1 eval some basic expresions (trivial, skipping some)

10

(define a 3)
(define b (+ a 1))

(* (cond ((> a b) -2)
	 ((< a b) -2)
	 (else -2))
   (+ a ))

;; 1.2 translate into prefix

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

;; 1.3 define a procedure that takes there numbers as args, and returns the sum of the squares of the larger two numbers

(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

(define (sum-three x y z)
  (cond ((and (< x y) (< x z)) (sum-of-squares y z)) ;; x is smallest
	((and (< z y) (< z )) (sum-of-squares x y)) ;; z is smallest
	(else (sum-of-squares x z)))) ;; y is smallest

;; 1.4 what is the behavior of the following procedure?

(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

;; it evaulates the if first, to return the procedure + if b is positive, or - if b is neg
;; since this operator is in the function position (first in the sexp), and it is being evaulated as
;; a procedure (because of the () ), it applys a and b to this.
;; this is then either a + b, or a - -b, so the it's a + (abs b)


;; 1.5 
;; A test for if the interpreter does applicative -order eval, or normal order -eval

(define (p) (p)) ;; does an inf loop

(define (test x y)
  (if (= x 0)
      0
      y))

;; (test 0 (p)) ;; don't eval this - it results in an infinite loop because the interpreter does applicative order evaluation!

;; if it's applicative order, it evaluates args first
;; therefore, it will infinite loop

;; if normal order, it builds up a tree and _then_ evals in a big collapse. So it will eval the test and return 0 before the infinite loop is evald


;; Sqrt example

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt x)
  (sqrt-iter 1.0 x))

;; Exercise 1.6
;; Can If be defined as not a special form, just a procedure that uses cond?

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
	(else else-clause)))

;; what happens if we try to use `new-if` in `sqrt-iter` above?
;; it aborts due to "maximum recursion depth exceeded", because it never stops
;; ... why?
;; becuase of eval rules for procedures! EVAL THE ARGS, then apply the operator.
;; so the else-clause ALWAYS gets evaluated, even though we only want it to be evaled when the predicate is false
;; this is why if is a special form - it only evals the else if the predicate is false

;; Exercise 1.7
;; good-enough? won't be effective for finding sqrt of very small numbers, or very large numbers (due to precision)
;; example: current version gives (sqrt 0.0001) -> 0.032308, but it should be 0.01


;; try keeping track of the old guess, and terminating when they are withing a small fraction of each other
(define (new-good-enough? guess old-guess x)
  (define percent-guess (/ (abs (- guess old-guess)) guess))
  (< percent-guess 0.01))
  
(define (new-sqrt-iter guess old-guess x)
  (if (new-good-enough? guess old-guess x)
      guess
      (new-sqrt-iter (improve guess x) guess x)))

(define (new-sqrt x)
  (new-sqrt-iter 1.0 0.0 x))

;; this works better, (new-sqrt 0.0001) -> 1e-2. The display is kinda shitty right now though, displaying fractions

;; Exercise 1.8
;; use the same above technique to approximate teh cube root
;; you can use (x/(sqare y) + 2y)/3

(define (cube-improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (cube-iter guess old-guess x)
  (if (new-good-enough? guess old-guess x)
      guess
      (cube-iter (cube-improve guess x) guess x)))

(define (cbrt x)
  (cube-iter 1.0 0.0 x))



;; factorial example

;; linear recursize - expands out, then collapses down. O(n) space and time
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))

;; linear iterative - O(n) time, O(1) space
;; state can be summarized by a fixed number of state variables
(define (fact n)
  (define fact-iter (lambda (product count)
    (if (> count n)
	product
	(fact-iter (* product count) (+ count 1)))))
  (fact-iter 1 1))

;; Exercise 1.9

(define (inc n)
  (+ n 1))

(define (dec n)
  (- n 1))


;; is this a recursive or iterative process?
(define (plus1 a b)
  (if (= a 0)
      b
      (inc (plus1 (dec a) b))))

;; (plus1 4 5)
;; (inc (plus1 3 5))
;; (inc (inc (plus1 2 5)))
;; (inc (inc (inc (plus1 1 5))))
;; (inc (inc (inc (inc (plus1 0 5)))))
;; (inc (inc (inc (inc 5))))
;; (inc (inc (inc 6)))
;; (inc (inc 7))
;; (inc 8)
;; 9
; recursive process

;; is this a recurisve or iterative process?
(define (plus2 a b)
  (if (= a 0)
      b
      (plus2 (dec a) (inc b))))

;; (plus2 4 5)
;; (plus2 3 6)
;; (plus2 2 7)
;; (plus2 1 8)
;; (plus2 0 9)
;; 9
;; iterative process

;; Exercise 1.10
;; The following procedure computes a mathematical function called Ackermann's function

(define (A x y)
  (cond ((= y 0) 0)
	((= x 0) (* 2 y))
	((= y 1) 2)
	(else (A (- x 1)
		 (A x (- y 1))))))

;; (A 1 10)
;; 1024

;; (A 2 4)
;; 65536

;; (A 3 3)
;; 65536

;; give definitions for the following procedures

(define (exponent base n)
  (define (exponent-iter acc count)
    (if (= count n)
	acc
	(exponent-iter (* acc base) (+ count 1))))
  (exponent-iter 1 0))

(define (f n) (A 0 n)) ;;; n*2

(define (g n) (A 1 n)) ;; powers of 2, 2^n

(define (h n) (A 2 n)) ;; 2^(h(n-1))

(define (k n) (* 5 n n)) ;; 5*n^2

;; Fib!

(define (fib n)
  (if (< n 2)
	n
	(+ (fib (- n 1))
	   (fib (- n 2)))))


(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))

(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
	((or (< amount 0) (= kinds-of-coins 0) 0))
	(else (+ (cc amount (- kinds-of-coins 1))
		 (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)
	((= kinds-of-coins 3) 10)
	((= kinds-of-coins 4) 25)
	((= kinds-of-coins 5) 50)))

;; Exercise 1.11
;;  A function f is defined by f(n) = n if n < 3, and f(n) = f(n-1) + 2f(n-2) + 3f(n-3) if n>=3
;; write the procedure as both an iterative process and a recursive process

;; recursive

(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
	 (* 2 (f (- n 2)))
	 (* 3 (f (- n 3))))))

;; iterative
;; a b c d e

(define (f2 n)
  (f-iter 2 1 0 n))

(define (f-iter a b c count)
  (define next (+ a
		 (* 2 b)
		 (* 3 c)))

  (cond ((= count 0) c)
	((= count 1) b)
	((= count 2) a)
	(else (f-iter next
		      a
		      b
		      (- count 1)))))


;; Exercise 1.12
;; Use a recursive process to compute pascal's triangle
;; each edge is 1, each number inside the triangle is the sum of the two numbers above it
;; TODO

;; Exercise 1.13
;;TODO

;; Exercise 1.14
;; Draw the tree illustrating the process generated by the count-change procedure of section 1.2.2
;; in making change for 11 cents. What are the orders of growth of the space and number of steps
;; used by this process as the amount to be changed increases?
